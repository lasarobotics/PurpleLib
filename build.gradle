plugins {
  id "java-library"
  id "maven-publish"
  id "edu.wpi.first.GradleRIO" version "2024.3.2"
  id "edu.wpi.first.WpilibTools" version "1.3.0"
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

group = 'com.github.lasarobotics'

repositories {
  maven {
    url = "https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit"
    credentials {
      username = "Mechanical-Advantage-Bot"
      password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
    }
  }
}

// Get AdvantageKit version from vendordep file
def AdvantageKitJSON = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)

dependencies {
  implementation wpi.java.deps.wpilib()
  implementation wpi.java.vendor.java()

  nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
  nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
  simulationDebug wpi.sim.enableDebug()

  nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
  nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
  simulationRelease wpi.sim.enableRelease()

  implementation 'org.apache.commons:commons-math3:3.+'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.+'
  testImplementation 'org.mockito:mockito-core:5.+'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'

  annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$AdvantageKitJSON.version"
}

test {
  useJUnitPlatform()
  systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Configure test task
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
  options.compilerArgs.add '-XDstringConcat=inline'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier = "sources"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      afterEvaluate {
        artifact javadocJar
        artifact sourcesJar
      }
    }
  }
}
