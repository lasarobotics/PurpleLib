// Copyright (c) LASA Robotics and other contributors
// Open Source Software; you can modify and/or share it under the terms of
// the MIT license file in the root directory of this project.

package org.lasarobotics.hardware.ctre;

import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.ThreadLocalRandom;

import org.lasarobotics.drive.swerve.AdvancedSwerveKinematics.ControlCentricity;
import org.lasarobotics.hardware.IMU;
import org.lasarobotics.hardware.LoggableHardware;
import org.lasarobotics.hardware.PurpleManager;
import org.littletonrobotics.junction.AutoLog;
import org.littletonrobotics.junction.Logger;

import com.ctre.phoenix6.StatusCode;
import com.ctre.phoenix6.configs.MountPoseConfigs;
import com.ctre.phoenix6.configs.Pigeon2Configuration;

import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.units.Units;
import edu.wpi.first.units.measure.Angle;
import edu.wpi.first.units.measure.AngularVelocity;
import edu.wpi.first.units.measure.Frequency;
import edu.wpi.first.units.measure.MutAngle;
import edu.wpi.first.units.measure.MutAngularVelocity;

/** CTRE Pigeon 2.0 */
public class Pigeon2 extends LoggableHardware implements IMU {
  /** Pigeon ID */
  public static class ID {
    public final String name;
    public final PhoenixCANBus bus;
    public final int deviceID;

    /**
     * Pidgeon2 ID
     * @param name Device name for logging
     * @param bus CAN bus
     * @param deviceID CAN ID
     */
    public ID(String name, PhoenixCANBus bus, int deviceID) {
      this.name = name;
      this.bus = bus;
      this.deviceID = deviceID;
    }
  }

  /**
   * Pigeon sensor inputs
   */
  @AutoLog
  public static class Pigeon2Inputs {
    public MutAngle pitchAngle = Units.Radians.of(0.0).mutableCopy();
    public MutAngle yawAngle = Units.Radians.of(0.0).mutableCopy();
    public MutAngle rollAngle = Units.Radians.of(0.0).mutableCopy();
    public MutAngularVelocity yawRate = Units.RadiansPerSecond.of(0.0).mutableCopy();
    public Rotation2d rotation2d = Rotation2d.kZero;
  }

  private static final Frequency DEFAULT_UPDATE_FREQUENCY = Units.Hertz.of(100);

  private static final AngularVelocity PIGEON2_YAW_DRIFT_RATE = Units.DegreesPerSecond.of(0.25 / 60);

  private Frequency m_updateRate;
  private Instant m_lastUpdateTime;

  private com.ctre.phoenix6.hardware.Pigeon2 m_pigeon;

  private ID m_id;
  private Pigeon2InputsAutoLogged m_inputs;


  /**
   * Create a Pigeon 2.0 object with built-in logging
   * <p>
   * Input thread period of 100Hz
   * @param id Pigeon 2.0 ID
   */
  public Pigeon2(ID id) {
    this(id, DEFAULT_UPDATE_FREQUENCY);
  }

  /**
   * Create a Pigeon 2.0 object with built-in logging
   * @param id Pigeon 2.0 ID
   * @param updateRate Update rate of inputs from Pigeon
   */
  public Pigeon2(ID id, Frequency updateRate) {
    this.m_id = id;
    this.m_pigeon = new com.ctre.phoenix6.hardware.Pigeon2(id.deviceID, id.bus.name);
    this.m_updateRate = updateRate;
    this.m_inputs = new Pigeon2InputsAutoLogged();
    this.m_lastUpdateTime = Instant.now();

    m_pigeon.getRoll().setUpdateFrequency(updateRate);
    m_pigeon.getPitch().setUpdateFrequency(updateRate);
    m_pigeon.getYaw().setUpdateFrequency(updateRate);

    // Update inputs on init
    periodic();

    // Register device with manager
    PurpleManager.add(this);
  }

  /**
   * Update Pidgeon input readings
   */
  protected void updateInputs() {
    synchronized (m_inputs) {
      m_inputs.pitchAngle.mut_replace(m_pigeon.getPitch().getValue());
      m_inputs.yawAngle.mut_replace(m_pigeon.getYaw().getValue());
      m_inputs.rollAngle.mut_replace(m_pigeon.getRoll().getValue());
      m_inputs.yawRate.mut_replace(m_pigeon.getAngularVelocityZWorld().getValue());
      m_inputs.rotation2d = m_pigeon.getRotation2d();
    }
  }

  /**
   * Call this method periodically
   */
  @Override
  protected void periodic() {
    synchronized (m_inputs) { Logger.processInputs(m_id.name, m_inputs); }
  }

  @Override
  public Frequency getUpdateRate() {
    return m_updateRate;
  }

  /**
   * Get latest sensor input data
   * @return Latest sensor data
   */
  @Override
  public Pigeon2InputsAutoLogged getInputs() {
    synchronized (m_inputs) { return m_inputs; }
  }

  /**
   * Get device ID
   * @return Device ID
   */
  public ID getID() {
    return m_id;
  }

  /**
   * Configures all persistent settings to defaults (overloaded so timeoutMs is 50 ms).
   *
   * @return Status Code generated by function. 0 indicates no error.
   */
  public StatusCode configFactoryDefault() {
    return m_pigeon.getConfigurator().apply(new Pigeon2Configuration());
  }

	/**
	 * Configure the Mount Pose using pitch, roll, and yaw.
	 *
	 * @param pitch The mounting calibration pitch-component
	 * @param roll The mounting calibration roll-component
   * @param yaw The mounting calibration yaw-component
	 * @return Status Code of the set command.
	 */
  public StatusCode configMountPose(double pitch, double roll, double yaw) {
    var toApply = new MountPoseConfigs();
    toApply.MountPosePitch = pitch;
    toApply.MountPoseRoll = roll;
    toApply.MountPoseYaw = yaw;
    return m_pigeon.getConfigurator().apply(toApply);
  }

  @Override
  public void reset() {
    m_pigeon.reset();
  }

  @Override
  public Angle getRoll() {
    synchronized (m_inputs) { return m_inputs.rollAngle; }
  }

  @Override
  public Angle getPitch() {
    synchronized (m_inputs) { return m_inputs.pitchAngle; }
  }

  @Override
  public Angle getYaw() {
    synchronized (m_inputs) { return m_inputs.yawAngle; }
  }

  @Override
  public AngularVelocity getYawRate() {
    synchronized (m_inputs) { return m_inputs.yawRate; }
  }

  @Override
  public Rotation2d getRotation2d() {
    synchronized (m_inputs) { return m_inputs.rotation2d; }
  }

  @Override
  public void updateSim(Rotation2d orientation, ChassisSpeeds desiredSpeeds, ControlCentricity controlCentricity) {
    var currentTime = Instant.now();
    double randomNoise = ThreadLocalRandom.current().nextDouble(0.9, 1.0);
    double dt = Duration.between(currentTime, m_lastUpdateTime).toMillis() / 1000.0;

    if (controlCentricity.equals(ControlCentricity.FIELD_CENTRIC))
      desiredSpeeds = ChassisSpeeds.fromFieldRelativeSpeeds(desiredSpeeds, orientation);

    int yawDriftDirection = ThreadLocalRandom.current().nextDouble(1.0) < 0.5 ? -1 : +1;
    double angle = m_inputs.yawAngle.in(Units.Degrees) + Math.toDegrees(desiredSpeeds.omegaRadiansPerSecond * randomNoise) * dt
                   + (PIGEON2_YAW_DRIFT_RATE.in(Units.DegreesPerSecond) * dt * yawDriftDirection);
    m_pigeon.getSimState().setRawYaw(Units.Degrees.of(angle));

    m_lastUpdateTime = currentTime;
  }

  @Override
  public void close() {
    PurpleManager.remove(this);
    m_pigeon.close();
  }
}
